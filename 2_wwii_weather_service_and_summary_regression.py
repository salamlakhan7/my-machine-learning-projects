# -*- coding: utf-8 -*-
"""wwii_weather_service_and_summary_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U0ea7hO7AkEdPXKToFs4zULOnqNQcAhG
"""

from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt # plotting
import numpy as np # linear algebra
import os # accessing directory structure
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

print(os.listdir('/content/Summary of Weather.csv'))

print(os.listdir('/content/'))

# Histogram of column data
def plotHistogram(df, nHistogramShown, nHistogramPerRow):
    nunique = df.nunique()
    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    nRow, nCol = df.shape
    columnNames = list(df)
    nHistRow = (nCol + nHistogramPerRow - 1) / nHistogramPerRow
    plt.figure(num=None, figsize=(6*nHistogramPerRow, 8*nHistRow), dpi=80, facecolor='w', edgecolor='k')
    for i in range(min(nCol, nHistogramShown)):
        plt.subplot(nHistRow, nHistogramPerRow, i+1)
        df.iloc[:,i].hist()
        plt.ylabel('counts')
        plt.xticks(rotation=90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout(pad=1.0, w_pad=1.0, h_pad=1.0)
    plt.show()

# Correlation matrix
def plotCorrelationMatrix(df, graphWidth):
    filename = df.dataframeName
    df = df.dropna('columns') # drop columns with NaN
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    if df.shape[1] < 2:
        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')
        return
    corr = df.corr()
    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')
    corrMat = plt.matshow(corr, fignum = 1)
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.gca().xaxis.tick_bottom()
    plt.colorbar(corrMat)
    plt.title(f'Correlation Matrix for {filename}', fontsize=15)
    plt.show()

# Scatter and density plots
def plotScatterMatrix(df, plotSize, textSize):
    df = df.select_dtypes(include =[np.number]) # keep only numerical columns
    # Remove rows and columns that would lead to df being singular
    df = df.dropna('columns')
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    columnNames = list(df)
    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots
     columnNames = columnNames[:10]
    df = df[columnNames]
    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')
    corrs = df.corr().values
    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):
        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)
    plt.suptitle('Scatter and Density Plot')
    plt.show()

nRowsRead = 1000 # specify 'None' if want to read whole file
# Summary of Weather.csv has 119040 rows in reality, but we are only loading/previewing the first 1000 rows
df1 = pd.read_csv('Summary of Weather.csv', delimiter=',', nrows=nRowsRead)
df1.dataframeName = 'Summary of Weather.csv'
nRow, nCol = df1.shape
print(f'There are {nRow} rows and {nCol} columns')

df1.head(5)

plotHistogram(df1, 10, 5)

import matplotlib.pyplot as plt

def plotHistogram(df, n_hist_per_row, n_rows):
    """
    Plots histograms for all numerical columns in the dataframe.

    Parameters:
    df (DataFrame): The DataFrame containing the data.
    n_hist_per_row (int): Number of histograms per row.
    n_rows (int): Number of rows of histograms.
    """
    numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns
    fig, axes = plt.subplots(n_rows, n_hist_per_row, figsize=(15, 5 * n_rows))

    # Flatten axes for easy iteration
    axes = axes.flatten()

    for i, col in enumerate(numeric_columns):
        if i >= len(axes):
            break
        df[col].plot(kind='hist', ax=axes[i], title=col)

    # Hide any unused subplots
    for j in range(i + 1, len(axes)):
        axes[j].axis('off')

    plt.tight_layout()
    plt.show()



plotHistogram(df1, 10, 5)

import seaborn as sns
import matplotlib.pyplot as plt

def plotCorrelationMatrix(df, graphWidth):
    """
    Plots a correlation matrix for the DataFrame `df`.

    Parameters:
    df (DataFrame): The DataFrame containing the data.
    graphWidth (int): The width of the graph.
    """
    # Keep only numeric columns
    df = df.select_dtypes(include=[float, int])

    # Drop columns with NaN values
    df = df.dropna(axis=1)  # Drop columns with NaN

    # Keep columns with more than one unique value
    df = df[[col for col in df if df[col].nunique() > 1]]

    if df.shape[1] < 2:
        print(f"No correlation plots shown: the DataFrame doesn't have enough numerical columns.")
        return

    # Calculate the correlation matrix
    corr = df.corr()

    # Set up the matplotlib figure
    plt.figure(figsize=(graphWidth, graphWidth))

    # Draw the heatmap
    sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", square=True)

    plt.title('Correlation Matrix', size=15)
    plt.show()

#plotCorrelationMatrix(df1, 8)
plotCorrelationMatrix(df1, 8)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix

def plotScatterMatrix(df, plotSize, textSize):
    """
    Plots a scatter matrix for the DataFrame `df`.

    Parameters:
    df (DataFrame): The DataFrame containing the data.
    plotSize (int): The size of the scatter plot matrix.
    textSize (int): The size of the text in the plot.
    """
    df = df.select_dtypes(include=[np.number])  # Keep only numerical columns

    # Drop columns with NaN values
    df = df.dropna(axis=1)

    # Keep columns with more than one unique value
    df = df[[col for col in df if df[col].nunique() > 1]]

    if df.shape[1] < 2:
        print(f"No scatter matrix plot shown: the DataFrame doesn't have enough numerical columns.")
        return

    # Plot scatter matrix
    ax = scatter_matrix(df, alpha=0.75, figsize=(plotSize, plotSize), diagonal='kde')

    # Change rotation of labels
    [plt.setp(item.yaxis.get_majorticklabels(), 'size', textSize) for item in ax.ravel()]
    [plt.setp(item.xaxis.get_majorticklabels(), 'size', textSize) for item in ax.ravel()]

    plt.show()

plotScatterMatrix(df1, 20, 10)

from google.colab import files
uploaded = files.upload()

df2 = pd.read_csv('Weather Station Locations.csv', delimiter=',', nrows=nRowsRead)

df2 = pd.read_csv('/content/Weather Station Locations.csv', delimiter=',', nrows=nRowsRead)

import os
print(os.getcwd())
print(os.listdir())

nRowsRead = 1000 # specify 'None' if want to read whole file
df2 = pd.read_csv('../content/Weather Station Locations.csv', delimiter=',', nrows = nRowsRead)
df2.dataframeName = 'Weather Station Locations.csv'
nRow, nCol = df2.shape
print(f'There are {nRow} rows and {nCol} columns')

df2.head(5)

plotHistogram(df2, 10, 5)

plotCorrelationMatrix(df2, 8)

plotScatterMatrix(df2, 12, 10)