# -*- coding: utf-8 -*-
"""Scipy_library.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_XWlRqoMTf75PgFIS6s6NLtH-s0X2LyH
"""

from scipy import cluster
help(cluster)

help()

from scipy import special
a=special.exp10(2)
print(a)

import numpy as np
import scipy as special
a=np.array([1,2,3])
print(a**2)

from scipy import cluster
help(cluster)

help()

#SPECIAL FUNCTION
from scipy import special

#Exponential
a=special.exp10(2)
b=special.exp2(3)
print(a)
print(b)

#TRIGNOMETRIC FUNCTION
from scipy import special
a=special.sindg(90)
b=special.cosdg(0)
print(a)
print(b)

#INTEGRATION
from scipy import integrate
f=lambda x:np.exp(-x**2)
i=integrate.quad(f,0,np.inf)
print(i)

import scipy
from scipy import integrate
from scipy import special
i= scipy.integrate.quad(lambda x: special.exp10(x),0,1)
print(i)

e = lambda x, y : x*y**2
g=lambda x:1
h= lambda x:-1
integrate.dblquad(e,0,2,g,h)

#FOURIER TRANSFORMATION
from scipy.fft import fft,ifft
import numpy as np
x=np.array([1,2,3,4])
y=fft(x)
print(y)

#LINEAR ALGEBRA
from scipy import linalg
import numpy as np
a=np.array([[1,2],[3,4]])
b=linalg.inv(a)
print(b)

#interpolation function
import matplotlib.pyplot as plt
from scipy import interpolate
import numpy as np
x=np.arange(0,10)
y=np.exp(x)

#interpolation function
import matplotlib.pyplot as plt
from scipy import interpolate
import numpy as np
x=np.arange(0,10)
y=np.exp(x)
f = interpolate.interp1d(x, y)

xnew = np.arange(0, 9, 0.1)
ynew = f(xnew)   # use interpolation function returned by `interp1d`
plt.plot(x, y, 'o', xnew, ynew, '-')
plt.show()